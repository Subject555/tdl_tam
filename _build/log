# jbuilder runtest
# OCAMLPARAM: unset
$ /usr/bin/nproc > /tmp/dune300a09.output
$ /opt/opam/4.06.0/bin/ocamlc.opt -config > /tmp/duned22361.output
$ (cd _build/default && .rat.inline-tests/run.exe inline-test-runner rat -source-tree-root . -diff-cmd -)
> AST : 
> Int add (Int a Int b ) = 
> Declaration  : Int c = 0 
> Affectation  : c  = 0 + a   
> Return a  + b  + c    
> Declaration  : Int x = 3 
> Affectation  : x  = 4 
> Constante  : y = 5
> Declaration  : Int z = x  + y   
> Conditionnelle  : IF x  < 0  
> THEN 
> Declaration  : Bool x = true 
> Affectation  : x  = false 
> ELSE 
> Declaration  : Rat x = [4 /3 ] 
> Declaration  : Int e = call add(num x   y  ) 
>
> AST : 
> Int plus1 (Int a Int b ) = 
> Declaration  : Int c = 1 
> Return a  + b  + c    
> Declaration  : Int x = 3 
> Declaration  : Int y = 4 
> Affichage  : call plus1(x  y  ) 
> AST : 
> Declaration  : Int x = 3 
> AST : 
> Declaration  : Rat x = [3 /4 ] 
> AST : 
> Declaration  : Bool x = true 
> AST : 
> Declaration  : Int x = true 
> AST : 
> Declaration  : Rat x = true 
> AST : 
> Declaration  : Bool x = 1 
> AST : 
> Declaration  : Rat x = 1 
> AST : 
> Declaration  : Int x = [2 /3 ] 
> AST : 
> Declaration  : Bool x = [2 /3 ] 
> AST : 
> Declaration  : Int x = 3 
> Affectation  : x  = 4 
> AST : 
> Declaration  : Bool x = true 
> Affectation  : x  = false 
> AST : 
> Declaration  : Rat x = [3 /4 ] 
> Affectation  : x  = [4 /5 ] 
> AST : 
> Declaration  : Rat x = [3 /4 ] 
> Affectation  : x  = 4 
> AST : 
> Declaration  : Int x = 4 
> Affectation  : x  = true 
> AST : 
> Declaration  : Rat x = [3 /4 ] 
> Affectation  : x  = true 
> AST : 
> Declaration  : Int x = 3 
> Affectation  : x  = [3 /4 ] 
> AST : 
> Declaration  : Bool x = true 
> Affectation  : x  = [3 /4 ] 
> AST : 
> Declaration  : Bool x = true 
> Affectation  : x  = 3 
> AST : 
> Conditionnelle  : IF true 
> THEN 
> Declaration  : Int x = 3 
> ELSE 
> Declaration  : Int x = 3 
>
> AST : 
> Conditionnelle  : IF 4 
> THEN 
> Declaration  : Int x = 3 
> ELSE 
> Declaration  : Int x = 3 
>
> AST : 
> Conditionnelle  : IF [4 /3 ] 
> THEN 
> Declaration  : Int x = 3 
> ELSE 
> Declaration  : Int x = 3 
>
> AST : 
> Declaration  : Bool x = true 
> Conditionnelle  : IF x  
> THEN 
> Declaration  : Int x = 3 
> ELSE 
> Declaration  : Int x = 3 
>
> AST : 
> Declaration  : Int x = 4 
> Conditionnelle  : IF x  
> THEN 
> Declaration  : Int x = 3 
> ELSE 
> Declaration  : Int x = 3 
>
> AST : 
> Declaration  : Rat x = [3 /4 ] 
> Conditionnelle  : IF x  
> THEN 
> Declaration  : Int x = 3 
> ELSE 
> Declaration  : Int x = 3 
>
> AST : 
> TantQue  : TQ true 
> FAIRE 
> Declaration  : Int x = 3 
>
> AST : 
> TantQue  : TQ 3 
> FAIRE 
> Declaration  : Int x = 3 
>
> AST : 
> TantQue  : TQ [3 /4 ] 
> FAIRE 
> Declaration  : Int x = 3 
>
> AST : 
> Declaration  : Bool x = true 
> TantQue  : TQ x  
> FAIRE 
> Declaration  : Int x = 3 
>
> AST : 
> Declaration  : Int x = 3 
> TantQue  : TQ x  
> FAIRE 
> Declaration  : Int x = 3 
>
> AST : 
> Declaration  : Rat x = [3 /4 ] 
> TantQue  : TQ x  
> FAIRE 
> Declaration  : Int x = 3 
>
> AST : 
> Affichage  : 3 
> AST : 
> Affichage  : [3 /4 ] 
> AST : 
> Affichage  : true 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Declaration  : Int x = call add1(3 4 ) 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Declaration  : Int z = 3 
> Declaration  : Int x = call add1(z  4 ) 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Constante  : z = 3
> Declaration  : Int x = call add1(z  4 ) 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Constante  : z = 3
> Declaration  : Int x = call add1(z  + 2  4 + 6  ) 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Constante  : z = 3
> Declaration  : Int x = call add1(z  + 2  call add1(8 5 ) ) 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Declaration  : Int x = call add1(2 true ) 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Declaration  : Int x = call add1(true 2 ) 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Declaration  : Int x = call add1([4 /3 ] 2 ) 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Declaration  : Bool z = true 
> Declaration  : Int x = call add1(4 z  ) 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Declaration  : Int x = call add1(4 5 6 ) 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Declaration  : Int x = call add1(4 ) 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Declaration  : Bool x = call add1(4 5 ) 
> AST : 
> Int add1 (Int x Int y ) = 
> Declaration  : Int z = x  + y   
> Return z  + 1  
> Declaration  : Rat x = call add1(4 5 ) 
> AST : 
> Int add (Int x Int y ) = 
> Return x  + y   
> Declaration  : Int x = 4 
> AST : 
> Int add (Int x Int y ) = 
> Return true 
> Declaration  : Int x = 4 
> AST : 
> Declaration  : Rat x = [3 /4 ] 
> AST : 
> Constante  : a = 3
> Declaration  : Int b = 4 
> Declaration  : Rat x = [a  /b  ] 
> AST : 
> Declaration  : Rat x = [3 /[4 /5 ] ] 
> AST : 
> Declaration  : Rat x = [true /5 ] 
> AST : 
> Declaration  : Int x = [4 /5 ] 
> AST : 
> Declaration  : Int x = num [3 /4 ]  
> AST : 
> Declaration  : Rat z = [3 /4 ] 
> Declaration  : Int x = num z   
> AST : 
> Declaration  : Int x = num true  
> AST : 
> Declaration  : Int x = num 4  
> AST : 
> Declaration  : Bool x = num [3 /4 ]  
> AST : 
> Declaration  : Int x = denom [3 /4 ]  
> AST : 
> Declaration  : Rat z = [3 /4 ] 
> Declaration  : Int x = denom z   
> AST : 
> Declaration  : Int x = denom true  
> AST : 
> Declaration  : Int x = denom 4  
> AST : 
> Declaration  : Bool x = num [3 /4 ]  
> AST : 
> Declaration  : Int x = 3 
> Declaration  : Int y = x  
> AST : 
> Declaration  : Bool x = true 
> Declaration  : Bool y = x  
> AST : 
> Declaration  : Rat x = [3 /4 ] 
> Declaration  : Rat y = x  
> AST : 
> Declaration  : Rat x = [3 /4 ] 
> Declaration  : Int y = x  
> AST : 
> Declaration  : Rat x = [3 /4 ] 
> Declaration  : Bool y = x  
> AST : 
> Declaration  : Int x = 3 
> Declaration  : Bool y = x  
> AST : 
> Declaration  : Int x = 3 
> Declaration  : Rat y = x  
> AST : 
> Declaration  : Bool x = true 
> Declaration  : Rat y = x  
> AST : 
> Declaration  : Bool x = true 
> Declaration  : Int y = x  
> AST : 
> Int fact (Int i Int n ) = 
> Declaration  : Int res = 0 
> Conditionnelle  : IF i  = n   
> THEN 
> Affectation  : res  = i  
> ELSE 
> Affectation  : res  = i  * call fact(i  + 1  n  )  
>
> Return res  
> Declaration  : Int x = call fact(1 5 ) 
> Affichage  : x  
> AST : 
> Declaration  : Int x = 3 + 4  
> AST : 
> Declaration  : Rat x = [1 /3 ] + [4 /5 ]  
> AST : 
> Declaration  : Bool x = true + false  
> AST : 
> Declaration  : Bool x = [1 /2 ] = [2 /4 ]  
> AST : 
> Declaration  : Bool x = true = false  
> AST : 
> Declaration  : Bool x = 3 = 4  
> AST : 
> Declaration  : Int x = 3 * 4  
> AST : 
> Declaration  : Rat x = [1 /3 ] * [4 /5 ]  
> AST : 
> Declaration  : Bool x = true * false  
> AST : 
> Declaration  : Bool x = [1 /2 ] < [2 /4 ]  
> AST : 
> Declaration  : Bool x = true < false  
> AST : 
> Declaration  : Bool x = 3 < 4  
> File "../../fichiersRat/testPt.rat", line 1, characters 1-2: lexical error (unexpected character).
> File "testTam.ml", line 126, characters 0-95:
> Error: program exited while expect test was running!
> Output captured so far:
[2]
