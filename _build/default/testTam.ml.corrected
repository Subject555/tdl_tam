
open Compilateur
open Code
(* Changer le chemin d'accès du jar. *)
let runtamcmde = "java -jar ../../runtam/runtam.jar"

(* read up to maxlen characters from the input channel. *)
let load_chan ic =
  let maxlen = 10000 in   (* this is ugly but I cannot use in_channel_length on a pipe *)
  let s = Bytes.create maxlen in
  begin
    try really_input ic s 0 maxlen
    with End_of_file -> ()     (* don't care if maxlen was too large *)
  end;
  Bytes.to_string (Bytes.sub s 0 (Bytes.index s '\000'))  (* truncate the bytes and stringify them *)

(* requires module Str, not installed by default
let remove_blanks s = Str.global_replace (Str.regexp "[\r\n\t ]") "" s
*)
let remove_blanks = String.trim

(* Execute the TAM code obtained from the rat file and return the ouptut of this code *)
let runtamcode cmde ratfile =
  let tamcode = compiler ratfile in
  let (tamfile, chan) = Filename.open_temp_file "test" ".tam" in
  ecrireFichier "../../testoui.tam" tamcode;
  output_string chan tamcode;
  close_out chan;
  let ic = Unix.open_process_in (cmde ^ " " ^ tamfile) in
  let printed = load_chan ic in
  close_in ic;
  (*Sys.remove tamfile; *)   (* à commenter si on veut étudier le code TAM. *)
  remove_blanks printed

(* Compile and run ratfile, and compare its output to the expected output *)
let compareoutputstring ratfile expected =
  let printed = runtamcode runtamcmde ratfile in
    (* Printf.printf "> %s\n" printed;
    Printf.printf "< %s\n" expected; *)
    (printed = (remove_blanks expected))

(* Compile and run ratfile, and compare its output to the expected output stored in the out file. *)
let compareoutputfile ratfile =
  let expectedchan = open_in ((Filename.remove_extension ratfile) ^ ".out") in
  let expected = load_chan expectedchan in
  close_in expectedchan;
  compareoutputstring ratfile expected

(* Compile and run ratfile, then print its output *)
let runtam ratfile =
  print_string (runtamcode runtamcmde ratfile)



(* requires ppx_expect in jbuild, and `opam install ppx_expect` *)


let%expect_test "testprintint" =
  runtam "../../fichiersRat/src-rat-tam-test/testprintint.rat";
  [%expect{|
    AST :
    Affichage  : 42
    42 |}]

let%expect_test "testprintbool" =
  runtam "../../fichiersRat/src-rat-tam-test/testprintbool.rat";
  [%expect{|
    AST :
    Affichage  : true
    true |}]

let%expect_test "testprintrat" =
   runtam "../../fichiersRat/src-rat-tam-test/testprintrat.rat";
   [%expect{|
     AST :
     Affichage  : [4 /5 ]
     [4/5] |}]

let%expect_test "testaddint" =
  runtam "../../fichiersRat/src-rat-tam-test/testaddint.rat";
  [%expect{|
    AST :
    Affichage  : 20 + 22
    42 |}]

let%expect_test "testaddrat" =
  runtam "../../fichiersRat/src-rat-tam-test/testaddrat.rat";
  [%expect{|
    AST :
    Affichage  : [1 /2 ] + [2 /3 ]
    [7/6] |}]

let%expect_test "testmultint" =
  runtam "../../fichiersRat/src-rat-tam-test/testmultint.rat";
  [%expect{|
    AST :
    Affichage  : 20 * 22
    440 |}]

let%expect_test "testmultrat" =
  runtam "../../fichiersRat/src-rat-tam-test/testmultrat.rat";
  [%expect{|
    AST :
    Affichage  : [7 /2 ] * [4 /3 ]
    [14/3] |}]

let%expect_test "testnum" =
  runtam "../../fichiersRat/src-rat-tam-test/testnum.rat";
  [%expect{|
    AST :
    Declaration  : Rat x = [4 /7 ]
    Affichage  : num x
    4 |}]

let%expect_test "testdenom" =
  runtam "../../fichiersRat/src-rat-tam-test/testdenom.rat";
  [%expect{|
    AST :
    Declaration  : Rat x = [4 /7 ]
    Affichage  : denom x
    7 |}]

let%expect_test "testwhile1" =
  runtam "../../fichiersRat/src-rat-tam-test/testwhile1.rat";
  [%expect{|
    AST :
    Declaration  : Int x = 1
    Declaration  : Int y = 1
    TantQue  : TQ y < 10
    FAIRE
    Affectation  : x = x + 2
    Affectation  : y = y + 1

    Affichage  : x
    19 |}]

let%expect_test "testif1" =
  runtam "../../fichiersRat/src-rat-tam-test/testif1.rat";
  [%expect{|
    AST :
    Declaration  : Int x = 1
    Declaration  : Int y = 1
    Conditionnelle  : IF x = y
    THEN
    Affichage  : 18
    ELSE
    Affichage  : 21

    18 |}]

let%expect_test "testif2" =
  runtam "../../fichiersRat/src-rat-tam-test/testif2.rat";
  [%expect{|
    AST :
    Declaration  : Int x = 1
    Declaration  : Int y = 2
    Conditionnelle  : IF x = y
    THEN
    Affichage  : 18
    ELSE
    Affichage  : 21

    21 |}]
  
let%expect_test "factiter" =
  runtam "../../fichiersRat/src-rat-tam-test/factiter.rat";
  [%expect{|
    AST :
    Constante  : n = 5
    Declaration  : Int fact = 1
    Declaration  : Int i = 1
    TantQue  : TQ i < n + 1
    FAIRE
    Affectation  : fact = fact * i
    Affectation  : i = i + 1

    Affichage  : fact
    120 |}]

let%expect_test "factrec" =
  runtam "../../fichiersRat/src-rat-tam-test/factrec.rat";
  [%expect{|
    AST :
    Int fact (Int i Int n ) =
    Declaration  : Int res = 0
    Conditionnelle  : IF i = n
    THEN
    Affectation  : res = i
    ELSE
    Affectation  : res = i * call fact(i + 1  n )

    Return res
    Declaration  : Int x = call fact(1 5 )
    Affichage  : x
    120 |}]

let%expect_test "factfuns" =
  runtam "../../fichiersRat/src-rat-tam-test/testfuns.rat";
  [%expect{|
    AST :
    Rat f3 (Int a Int b Rat r ) =
    Return [a + num r   /b + denom r   ]
    Rat f2 (Bool b Rat x Rat y ) =
    Declaration  : Int x1 = num x
    Declaration  : Int x2 = denom x
    Declaration  : Rat res = call f3(x1 x2 y )
    Return res
    Int f1 (Int i Rat r Int n ) =
    Declaration  : Rat sr = call f2(true r [i /n ] )
    Return denom sr
    Declaration  : Int x = call f1(13 [4 /11 ] 17 )
    Affichage  : x
    28 |}]

let%expect_test "complique" =
  runtam "../../fichiersRat/src-rat-tam-test/complique.rat";
  [%expect{|
    AST :
    Constante  : a = 5
    Declaration  : Rat x = [6 /a ]
    Declaration  : Int y = a + 1
    Affectation  : x = x + [3 /2 ]
    TantQue  : TQ y < 10
    FAIRE
    Affichage  : [a /y ] * x
    Affectation  : y = y + 1

    [9/4][27/14][27/16][3/2] |}]